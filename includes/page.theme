<?php

/**
 * @file
 * page.theme
 */

use Drupal\gin\TonicContentFormHelper;
use Drupal\Core\Entity\EntityInterface;
use Drupal\gin\TonicSettings;
use Drupal\node\Entity\Node;

/**
 * Implements hook_preprocess_HOOK() for page.
 */
function tonic_preprocess_page(&$variables) {
  // Required for allowing subtheming Tonic.
  $activeThemeName = \Drupal::theme()->getActiveTheme()->getName();
  $variables['active_admin_theme'] = $activeThemeName;

  /** @var \Drupal\gin\TonicSettings $settings */
  $settings = \Drupal::classResolver(TonicSettings::class);

  // Expose Toolbar variant.
  $variables['toolbar_variant'] = $settings->get('classic_toolbar');

  // Expose Route name.
  $variables['route_name'] = \Drupal::routeMatch()->getRouteName();

  if (preg_match('#entity\.(?<entity_type_id>.+)\.canonical#', $variables['route_name'], $matches)) {
    $entity = \Drupal::request()->attributes->get($matches['entity_type_id']);

    if ($entity instanceof EntityInterface && $entity->hasLinkTemplate('edit-form')) {
      $variables['entity_title'] = $entity->label();
      $variables['entity_edit_url'] = $entity->toUrl('edit-form');
    }
  }
}

/**
 * Implements hook_preprocess_HOOK() for page_alter.
 */
function tonic_theme_suggestions_page_alter(&$suggestions, $variables) {
  $path = \Drupal::requestStack()->getCurrentRequest()->getPathInfo();

  if ($path != '/') {
    $path = trim($path, '/');
    $arg = str_replace(["/", '-'], ['_', '_'], $path);
    $suggestions[] = 'page__' . $arg;
  }

  // The node page template is required to use the node content form.
  if (\Drupal::classResolver(TonicContentFormHelper::class)->isContentForm()
    && !in_array('page__node', $suggestions)) {
    $suggestions[] = 'page__node';
  }
}

/**
 * Implements hook_preprocess_HOOK() for page_attachments.
 */
function tonic_page_attachments_alter(&$page) {
  // Are we relevant?
  $tonic_activated = _tonic_is_active();

  if ($tonic_activated) {
    $drupal_version = (float) Drupal::VERSION;

    // Get theme settings.
    $settings = \Drupal::classResolver(TonicSettings::class);
    $toolbar = $settings->get('classic_toolbar');

    // Attach the init script.
    $page['#attached']['library'][] = 'tonic/tonic_init';

    if ($toolbar === 'classic') {
      // Attach the classic toolbar styles.
      $page['#attached']['library'][] = 'tonic/tonic_classic_toolbar';
    }
    elseif ($toolbar === 'horizontal') {
      // Attach the horizontal toolbar styles.
      $page['#attached']['library'][] = 'tonic/tonic_horizontal_toolbar';
    }
    else {
      // Attach toolbar styles.
      $page['#attached']['library'][] = 'tonic/tonic_toolbar';
    }

    // Attach accent library.
    $page['#attached']['library'][] = 'tonic/tonic_accent';

    // Attach sticky library.
    $page['#attached']['library'][] = 'tonic/sticky';

    // Attach Drupal.once for older Drupal versions.
    if ($drupal_version < 9.3) {
      $page['#attached']['library'][] = 'tonic/once';
    }

    // Custom CSS file.
    if (file_exists('public://tonic-custom.css')) {
      $page['#attached']['library'][] = 'tonic/tonic_custom_css';
    }

    // Expose settings to JS.
    $page['#attached']['drupalSettings']['tonic']['darkmode'] = $settings->get('enable_darkmode');
    $page['#attached']['drupalSettings']['tonic']['darkmode_class'] = 'tonic--dark-mode';
    $page['#attached']['drupalSettings']['tonic']['preset_accent_color'] = $settings->get('preset_accent_color');
    $page['#attached']['drupalSettings']['tonic']['accent_color'] = $settings->get('accent_color');
    $page['#attached']['drupalSettings']['tonic']['preset_focus_color'] = $settings->get('preset_focus_color');
    $page['#attached']['drupalSettings']['tonic']['focus_color'] = $settings->get('focus_color');
    $page['#attached']['drupalSettings']['tonic']['highcontrastmode'] = $settings->get('high_contrast_mode');
    $page['#attached']['drupalSettings']['tonic']['highcontrastmode_class'] = 'tonic--high-contrast-mode';
    $page['#attached']['drupalSettings']['tonic']['toolbar_variant'] = $settings->get('classic_toolbar');

    // Expose stylesheets to JS.
    $basethemeurl = '/' . \Drupal::service('extension.list.theme')->getPath('tonic');
    $page['#attached']['drupalSettings']['tonic']['variables_css_path'] = $basethemeurl . '/dist/css/theme/variables.css';
    $page['#attached']['drupalSettings']['tonic']['accent_css_path'] = $basethemeurl . '/dist/css/theme/accent.css';
    $page['#attached']['drupalSettings']['tonic']['ckeditor_css_path'] = $basethemeurl . '/dist/css/theme/ckeditor.css';

    // Expose default settings to JS.
    $page['#attached']['drupalSettings']['tonic']['default_darkmode'] = $settings->getDefault('enable_darkmode');
    $page['#attached']['drupalSettings']['tonic']['default_accent_color'] = $settings->getDefault('accent_color');
    $page['#attached']['drupalSettings']['tonic']['default_preset_accent_color'] = $settings->getDefault('preset_accent_color');
    $page['#attached']['drupalSettings']['tonic']['default_high_contrast_mode'] = $settings->getDefault('high_contrast_mode');
  }
}

/**
 * Page title.
 */
function tonic_preprocess_page_title(&$variables) {
  if (preg_match('/entity\.node\..*/', \Drupal::routeMatch()->getRouteName(), $matches)) {
    $node = \Drupal::routeMatch()->getParameter('node');
    if ($node instanceof Node) {
      if ($node->isDefaultTranslation() && !in_array($matches[0], [
        'entity.node.content_translation_add',
        'entity.node.delete_form',
      ])) {
        $variables['title'] = $node->getTitle();
      }
      elseif ($matches[0] === 'entity.node.edit_form') {
        $variables['title_attributes']['class'][] = 'page-title--is-translation';
        $args = [
          '@title' => $node->getTitle(),
          '@language' => $node->language()->getName(),
        ];
        $variables['title'] = t('@title <span class="page-title__language">(@language translation)</span>', $args);
      }
    }
  }
}

/**
 * Node revisions.
 */
function tonic_preprocess_page__node__revisions(&$page) {
  // Attach the init script.
  $page['#attached']['library'][] = 'tonic/revisions';
}
